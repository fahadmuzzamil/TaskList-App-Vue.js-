{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport AppHeader from \"./components/header\";\nimport TasksComponent from \"./components/tasksComponent\";\nimport FormComponent from \"./components/addForm\";\nexport default {\n  name: 'App',\n  components: {\n    AppHeader,\n    FormComponent,\n    TasksComponent\n  },\n  data() {\n    return {\n      tasks: Array,\n      displayMe: false,\n      heighted: false\n    };\n  },\n  methods: {\n    display() {\n      this.displayMe = !this.displayMe;\n    },\n    heightMeow() {\n      this.heighted = !this.heighted;\n    },\n    //Here we are using JSON server for Fake Backend service\n    async fetchData() {\n      const request = await fetch(\"api/tasks\");\n      const response = await request.json();\n      return response;\n    },\n    async created() {\n      this.tasks = await this.fetchData();\n    },\n    async fetchSingleData(id) {\n      const request = await fetch(`api/tasks/${id}`);\n      const response = await request.json();\n      return response;\n    },\n    async insertData(data) {\n      const request = await fetch(\"api/tasks\", {\n        method: 'POST',\n        headers: {\n          'Content-type': 'application/json '\n        },\n        body: JSON.stringify(data)\n      });\n      const response = await request.json();\n      this.tasks.push(response);\n      this.displayMe = !this.displayMe;\n    },\n    async updateData(id) {\n      const taskToToggle = await this.fetchSingleData(id);\n      const updtTask = {\n        ...taskToToggle,\n        reminder: !taskToToggle.reminder,\n        updatedAt: Date()\n      };\n      const request = await fetch(`api/tasks/${id}`, {\n        method: \"PUT\",\n        headers: {\n          'Content-type': 'application/json'\n        },\n        body: JSON.stringify(updtTask)\n      });\n      const response = await request.json();\n      this.tasks = this.tasks.map(task => task.id === id ? {\n        ...task,\n        reminder: response.reminder\n      } : task);\n    },\n    async deleteMe(id) {\n      if (confirm(\"Are you sure? The selected task will be deleted!\")) {\n        const request = await fetch(`api/tasks/${id}`, {\n          method: \"DELETE\"\n        });\n        request.status === 200 ? this.tasks = this.tasks.map(task => task.id != id) : this.tasks;\n      }\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["AppHeader","TasksComponent","FormComponent","name","components","data","tasks","Array","displayMe","heighted","methods","display","heightMeow","fetchData","request","fetch","response","json","created","fetchSingleData","id","insertData","method","headers","body","JSON","stringify","push","updateData","taskToToggle","updtTask","reminder","updatedAt","Date","map","task","deleteMe","confirm","status"],"sourceRoot":"","sources":["C:\\Users\\Fa Dii\\Desktop\\tasklist\\src\\App.vue"],"sourcesContent":["<template>\n<div class=\"container main-container\">\n   <AppHeader :text=\"displayMe ? 'Cancel': 'Add Task'\" :bgColor=\"displayMe ? 'red' : 'blue'\" @formDisplay=\"display\" @heightHit=\"heightMeow\"/>\n   <div v-show=\"displayMe\">\n   <FormComponent @formData=\"insertData\"/>\n  </div>\n   <TasksComponent :heightMe=\"heighted\" :tasks=\"tasks\" @dltd=\"deleteMe\" @toggle=\"updateData\"/>\n  </div>\n</template>\n\n<script>\nimport AppHeader from \"./components/header\";\nimport TasksComponent from \"./components/tasksComponent\";\nimport FormComponent from \"./components/addForm\";\nexport default {\n  name: 'App',\n  components: {\n    AppHeader,\n    FormComponent,\n    TasksComponent,\n  },\n  data() {\n    return {\n      tasks: Array,\n      displayMe: false,\n      heighted: false,\n    }\n  },\n  methods:{\n    display(){\n      this.displayMe = !this.displayMe\n    },\n    heightMeow(){\n       this.heighted = !this.heighted\n    },\n    //Here we are using JSON server for Fake Backend service\n    async fetchData(){\n      const request = await fetch(\"api/tasks\");\n      const response = await request.json();\n      \n      return response;\n    },\n    async created() {\n      this.tasks = await this.fetchData();\n    },\n   async fetchSingleData(id){\n    const request = await fetch(`api/tasks/${id}`);\n    const response = await request.json();\n    return response;\n   },\n   async insertData(data){\n      const request = await fetch(\"api/tasks\", {\n      method: 'POST',\n      headers:{\n        'Content-type': 'application/json ',\n      },\n      body: JSON.stringify(data),\n      }) \n      const response = await request.json();\n      this.tasks.push(response);\n      this.displayMe = !this.displayMe\n    },\n    async updateData(id){\n      const taskToToggle = await this.fetchSingleData(id);\n      const updtTask = {...taskToToggle, reminder: !taskToToggle.reminder, updatedAt: Date()};\n      const request = await fetch(`api/tasks/${id}`,{\n        method: \"PUT\",\n        headers: {\n          'Content-type': 'application/json'\n        },\n        body: JSON.stringify(updtTask),\n      });\n      const response = await request.json();\n      this.tasks = this.tasks.map((task)=> task.id === id ? {...task, reminder: response.reminder}: task)\n   },\n   async deleteMe(id){\n         if(confirm(\"Are you sure? The selected task will be deleted!\")){\n          const request = await fetch(`api/tasks/${id}`,{\n            method: \"DELETE\"\n          });\n          request.status===200? this.tasks = this.tasks.map((task)=> task.id != id ) : this.tasks\n         }\n     }\n} \n}  \n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n.main-container{\n  background: linear-gradient(to right, red, #3c598e);\n  width: 350px;\n  height: 550px;\n  border: 3px solid rgb(12, 12, 85);\n  border-radius: 10px;\n  box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n  overflow: hidden;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}